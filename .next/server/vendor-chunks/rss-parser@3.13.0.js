/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rss-parser@3.13.0";
exports.ids = ["vendor-chunks/rss-parser@3.13.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/index.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(/*! ./lib/parser */ \"(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/parser.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcnNzLXBhcnNlckAzLjEzLjAvbm9kZV9tb2R1bGVzL3Jzcy1wYXJzZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOElBQXdDIiwic291cmNlcyI6WyIvVXNlcnMvY2hpYmFoZWl0YXJvdS9oZWktZ2FrdXNlaXRlbnNob2t1L2FsbF9nYWt1c2VpdGVuc2hva3Uvbm9kZV9tb2R1bGVzLy5wbnBtL3Jzcy1wYXJzZXJAMy4xMy4wL25vZGVfbW9kdWxlcy9yc3MtcGFyc2VyL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9wYXJzZXInKTtcblxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/fields.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/fields.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("const fields = module.exports = {};\n\nfields.feed = [\n  ['author', 'creator'],\n  ['dc:publisher', 'publisher'],\n  ['dc:creator', 'creator'],\n  ['dc:source', 'source'],\n  ['dc:title', 'title'],\n  ['dc:type', 'type'],\n  'title',\n  'description',\n  'author',\n  'pubDate',\n  'webMaster',\n  'managingEditor',\n  'generator',\n  'link',\n  'language',\n  'copyright',\n  'lastBuildDate',\n  'docs',\n  'generator',\n  'ttl',\n  'rating',\n  'skipHours',\n  'skipDays',\n];\n\nfields.item = [\n  ['author', 'creator'],\n  ['dc:creator', 'creator'],\n  ['dc:date', 'date'],\n  ['dc:language', 'language'],\n  ['dc:rights', 'rights'],\n  ['dc:source', 'source'],\n  ['dc:title', 'title'],\n  'title',\n  'link',\n  'pubDate',\n  'author',\n  'summary',\n  ['content:encoded', 'content:encoded', {includeSnippet: true}],\n  'enclosure',\n  'dc:creator',\n  'dc:date',\n  'comments',\n];\n\nvar mapItunesField = function(f) {\n  return ['itunes:' + f, f];\n}\n\nfields.podcastFeed = ([\n  'author',\n  'subtitle',\n  'summary',\n  'explicit'\n]).map(mapItunesField);\n\nfields.podcastItem = ([\n  'author',\n  'subtitle',\n  'summary',\n  'explicit',\n  'duration',\n  'image',\n  'episode',\n  'image',\n  'season',\n  'keywords',\n  'episodeType'\n]).map(mapItunesField);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcnNzLXBhcnNlckAzLjEzLjAvbm9kZV9tb2R1bGVzL3Jzcy1wYXJzZXIvbGliL2ZpZWxkcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxxQkFBcUI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvY2hpYmFoZWl0YXJvdS9oZWktZ2FrdXNlaXRlbnNob2t1L2FsbF9nYWt1c2VpdGVuc2hva3Uvbm9kZV9tb2R1bGVzLy5wbnBtL3Jzcy1wYXJzZXJAMy4xMy4wL25vZGVfbW9kdWxlcy9yc3MtcGFyc2VyL2xpYi9maWVsZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmllbGRzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuZmllbGRzLmZlZWQgPSBbXG4gIFsnYXV0aG9yJywgJ2NyZWF0b3InXSxcbiAgWydkYzpwdWJsaXNoZXInLCAncHVibGlzaGVyJ10sXG4gIFsnZGM6Y3JlYXRvcicsICdjcmVhdG9yJ10sXG4gIFsnZGM6c291cmNlJywgJ3NvdXJjZSddLFxuICBbJ2RjOnRpdGxlJywgJ3RpdGxlJ10sXG4gIFsnZGM6dHlwZScsICd0eXBlJ10sXG4gICd0aXRsZScsXG4gICdkZXNjcmlwdGlvbicsXG4gICdhdXRob3InLFxuICAncHViRGF0ZScsXG4gICd3ZWJNYXN0ZXInLFxuICAnbWFuYWdpbmdFZGl0b3InLFxuICAnZ2VuZXJhdG9yJyxcbiAgJ2xpbmsnLFxuICAnbGFuZ3VhZ2UnLFxuICAnY29weXJpZ2h0JyxcbiAgJ2xhc3RCdWlsZERhdGUnLFxuICAnZG9jcycsXG4gICdnZW5lcmF0b3InLFxuICAndHRsJyxcbiAgJ3JhdGluZycsXG4gICdza2lwSG91cnMnLFxuICAnc2tpcERheXMnLFxuXTtcblxuZmllbGRzLml0ZW0gPSBbXG4gIFsnYXV0aG9yJywgJ2NyZWF0b3InXSxcbiAgWydkYzpjcmVhdG9yJywgJ2NyZWF0b3InXSxcbiAgWydkYzpkYXRlJywgJ2RhdGUnXSxcbiAgWydkYzpsYW5ndWFnZScsICdsYW5ndWFnZSddLFxuICBbJ2RjOnJpZ2h0cycsICdyaWdodHMnXSxcbiAgWydkYzpzb3VyY2UnLCAnc291cmNlJ10sXG4gIFsnZGM6dGl0bGUnLCAndGl0bGUnXSxcbiAgJ3RpdGxlJyxcbiAgJ2xpbmsnLFxuICAncHViRGF0ZScsXG4gICdhdXRob3InLFxuICAnc3VtbWFyeScsXG4gIFsnY29udGVudDplbmNvZGVkJywgJ2NvbnRlbnQ6ZW5jb2RlZCcsIHtpbmNsdWRlU25pcHBldDogdHJ1ZX1dLFxuICAnZW5jbG9zdXJlJyxcbiAgJ2RjOmNyZWF0b3InLFxuICAnZGM6ZGF0ZScsXG4gICdjb21tZW50cycsXG5dO1xuXG52YXIgbWFwSXR1bmVzRmllbGQgPSBmdW5jdGlvbihmKSB7XG4gIHJldHVybiBbJ2l0dW5lczonICsgZiwgZl07XG59XG5cbmZpZWxkcy5wb2RjYXN0RmVlZCA9IChbXG4gICdhdXRob3InLFxuICAnc3VidGl0bGUnLFxuICAnc3VtbWFyeScsXG4gICdleHBsaWNpdCdcbl0pLm1hcChtYXBJdHVuZXNGaWVsZCk7XG5cbmZpZWxkcy5wb2RjYXN0SXRlbSA9IChbXG4gICdhdXRob3InLFxuICAnc3VidGl0bGUnLFxuICAnc3VtbWFyeScsXG4gICdleHBsaWNpdCcsXG4gICdkdXJhdGlvbicsXG4gICdpbWFnZScsXG4gICdlcGlzb2RlJyxcbiAgJ2ltYWdlJyxcbiAgJ3NlYXNvbicsXG4gICdrZXl3b3JkcycsXG4gICdlcGlzb2RlVHlwZSdcbl0pLm1hcChtYXBJdHVuZXNGaWVsZCk7XG5cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/fields.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/parser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/parser.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/.pnpm/xml2js@0.5.0/node_modules/xml2js/lib/xml2js.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\n\nconst fields = __webpack_require__(/*! ./fields */ \"(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/fields.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/utils.js\");\n\nconst DEFAULT_HEADERS = {\n  'User-Agent': 'rss-parser',\n  'Accept': 'application/rss+xml',\n}\nconst DEFAULT_MAX_REDIRECTS = 5;\nconst DEFAULT_TIMEOUT = 60000;\n\nclass Parser {\n  constructor(options={}) {\n    options.headers = options.headers || {};\n    options.xml2js = options.xml2js || {};\n    options.customFields = options.customFields || {};\n    options.customFields.item = options.customFields.item || [];\n    options.customFields.feed = options.customFields.feed || [];\n    options.requestOptions = options.requestOptions || {};\n    if (!options.maxRedirects) options.maxRedirects = DEFAULT_MAX_REDIRECTS;\n    if (!options.timeout) options.timeout = DEFAULT_TIMEOUT;\n    this.options = options;\n    this.xmlParser = new xml2js.Parser(this.options.xml2js);\n  }\n\n  parseString(xml, callback) {\n    let prom = new Promise((resolve, reject) => {\n      this.xmlParser.parseString(xml, (err, result) => {\n        if (err) return reject(err);\n        if (!result) {\n          return reject(new Error('Unable to parse XML.'));\n        }\n        let feed = null;\n        if (result.feed) {\n          feed = this.buildAtomFeed(result);\n        } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/^2/)) {\n          feed = this.buildRSS2(result);\n        } else if (result['rdf:RDF']) {\n          feed = this.buildRSS1(result);\n        } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/0\\.9/)) {\n          feed = this.buildRSS0_9(result);\n        } else if (result.rss && this.options.defaultRSS) {\n          switch(this.options.defaultRSS) {\n            case 0.9:\n              feed = this.buildRSS0_9(result);\n              break;\n            case 1:\n              feed = this.buildRSS1(result);\n              break;\n            case 2:\n              feed = this.buildRSS2(result);\n              break;\n            default:\n              return reject(new Error(\"default RSS version not recognized.\"))\n          }\n        } else {\n          return reject(new Error(\"Feed not recognized as RSS 1 or 2.\"))\n        }\n        resolve(feed);\n      });\n    });\n    prom = utils.maybePromisify(callback, prom);\n    return prom;\n  }\n\n  parseURL(feedUrl, callback, redirectCount=0) {\n    let xml = '';\n    let get = feedUrl.indexOf('https') === 0 ? https.get : http.get;\n    let urlParts = url.parse(feedUrl);\n    let headers = Object.assign({}, DEFAULT_HEADERS, this.options.headers);\n    let timeout = null;\n    let prom = new Promise((resolve, reject) => {\n      const requestOpts = Object.assign({headers}, urlParts, this.options.requestOptions);\n      let req = get(requestOpts, (res) => {\n        if (this.options.maxRedirects && res.statusCode >= 300 && res.statusCode < 400 && res.headers['location']) {\n          if (redirectCount === this.options.maxRedirects) {\n            return reject(new Error(\"Too many redirects\"));\n          } else {\n            const newLocation = url.resolve(feedUrl, res.headers['location']);\n            return this.parseURL(newLocation, null, redirectCount + 1).then(resolve, reject);\n          }\n        } else if (res.statusCode >= 300) {\n          return reject(new Error(\"Status code \" + res.statusCode))\n        }\n        let encoding = utils.getEncodingFromContentType(res.headers['content-type']);\n        res.setEncoding(encoding);\n        res.on('data', (chunk) => {\n          xml += chunk;\n        });\n        res.on('end', () => {\n          return this.parseString(xml).then(resolve, reject);\n        });\n      })\n      req.on('error', reject);\n      timeout = setTimeout(() => {\n        return reject(new Error(\"Request timed out after \" + this.options.timeout + \"ms\"));\n      }, this.options.timeout);\n    }).then(data => {\n      clearTimeout(timeout);\n      return Promise.resolve(data);\n    }, e => {\n      clearTimeout(timeout);\n      return Promise.reject(e);\n    });\n    prom = utils.maybePromisify(callback, prom);\n    return prom;\n  }\n\n  buildAtomFeed(xmlObj) {\n    let feed = {items: []};\n    utils.copyFromXML(xmlObj.feed, feed, this.options.customFields.feed);\n    if (xmlObj.feed.link) {\n      feed.link = utils.getLink(xmlObj.feed.link, 'alternate', 0);\n      feed.feedUrl = utils.getLink(xmlObj.feed.link, 'self', 1);\n    }\n    if (xmlObj.feed.title) {\n      let title = xmlObj.feed.title[0] || '';\n      if (title._) title = title._\n      if (title) feed.title = title;\n    }\n    if (xmlObj.feed.updated) {\n      feed.lastBuildDate = xmlObj.feed.updated[0];\n    }\n    feed.items = (xmlObj.feed.entry || []).map(entry => this.parseItemAtom(entry));\n    return feed;\n  }\n\n  parseItemAtom(entry) {\n    let item = {};\n    utils.copyFromXML(entry, item, this.options.customFields.item);\n    if (entry.title) {\n      let title = entry.title[0] || '';\n      if (title._) title = title._;\n      if (title) item.title = title;\n    }\n    if (entry.link && entry.link.length) {\n      item.link = utils.getLink(entry.link, 'alternate', 0);\n    }\n    if (entry.published && entry.published.length && entry.published[0].length) item.pubDate = new Date(entry.published[0]).toISOString();\n    if (!item.pubDate && entry.updated && entry.updated.length && entry.updated[0].length) item.pubDate = new Date(entry.updated[0]).toISOString();\n    if (entry.author && entry.author.length && entry.author[0].name && entry.author[0].name.length) item.author = entry.author[0].name[0];\n    if (entry.content && entry.content.length) {\n      item.content = utils.getContent(entry.content[0]);\n      item.contentSnippet = utils.getSnippet(item.content)\n    }\n    if (entry.summary && entry.summary.length) {\n      item.summary = utils.getContent(entry.summary[0]);\n    }\n    if (entry.id) {\n      item.id = entry.id[0];\n    }\n    this.setISODate(item);\n    return item;\n  }\n\n  buildRSS0_9(xmlObj) {\n    var channel = xmlObj.rss.channel[0];\n    var items = channel.item;\n    return this.buildRSS(channel, items);\n  }\n\n  buildRSS1(xmlObj) {\n    xmlObj = xmlObj['rdf:RDF'];\n    let channel = xmlObj.channel[0];\n    let items = xmlObj.item;\n    return this.buildRSS(channel, items);\n  }\n\n  buildRSS2(xmlObj) {\n    let channel = xmlObj.rss.channel[0];\n    let items = channel.item;\n    let feed = this.buildRSS(channel, items);\n    if (xmlObj.rss.$ && xmlObj.rss.$['xmlns:itunes']) {\n      this.decorateItunes(feed, channel);\n    }\n    return feed;\n  }\n\n  buildRSS(channel, items) {\n    items = items || [];\n    let feed = {items: []};\n    let feedFields = fields.feed.concat(this.options.customFields.feed);\n    let itemFields = fields.item.concat(this.options.customFields.item);\n    if (channel['atom:link'] && channel['atom:link'][0] && channel['atom:link'][0].$) {\n      feed.feedUrl = channel['atom:link'][0].$.href;\n    }\n    if (channel.image && channel.image[0] && channel.image[0].url) {\n      feed.image = {};\n      let image = channel.image[0];\n      if (image.link) feed.image.link = image.link[0];\n      if (image.url) feed.image.url = image.url[0];\n      if (image.title) feed.image.title = image.title[0];\n      if (image.width) feed.image.width = image.width[0];\n      if (image.height) feed.image.height = image.height[0];\n    }\n    const paginationLinks = this.generatePaginationLinks(channel);\n    if (Object.keys(paginationLinks).length) {\n      feed.paginationLinks = paginationLinks;\n    }\n    utils.copyFromXML(channel, feed, feedFields);\n    feed.items = items.map(xmlItem => this.parseItemRss(xmlItem, itemFields));\n    return feed;\n  }\n\n  parseItemRss(xmlItem, itemFields) {\n    let item = {};\n    utils.copyFromXML(xmlItem, item, itemFields);\n    if (xmlItem.enclosure) {\n      item.enclosure = xmlItem.enclosure[0].$;\n    }\n    if (xmlItem.description) {\n      item.content = utils.getContent(xmlItem.description[0]);\n      item.contentSnippet = utils.getSnippet(item.content);\n    }\n    if (xmlItem.guid) {\n      item.guid = xmlItem.guid[0];\n      if (item.guid._) item.guid = item.guid._;\n    }\n    if (xmlItem.$ && xmlItem.$['rdf:about']) {\n      item['rdf:about'] = xmlItem.$['rdf:about']\n    }\n    if (xmlItem.category) item.categories = xmlItem.category;\n    this.setISODate(item);\n    return item;\n  }\n\n  /**\n   * Add iTunes specific fields from XML to extracted JSON\n   *\n   * @access public\n   * @param {object} feed extracted\n   * @param {object} channel parsed XML\n   */\n  decorateItunes(feed, channel) {\n    let items = channel.item || [];\n    let categories = [];\n    feed.itunes = {}\n\n    if (channel['itunes:owner']) {\n      let owner = {};\n\n      if(channel['itunes:owner'][0]['itunes:name']) {\n        owner.name = channel['itunes:owner'][0]['itunes:name'][0];\n      }\n      if(channel['itunes:owner'][0]['itunes:email']) {\n        owner.email = channel['itunes:owner'][0]['itunes:email'][0];\n      }\n      feed.itunes.owner = owner;\n    }\n\n    if (channel['itunes:image']) {\n      let image;\n      let hasImageHref = (channel['itunes:image'][0] &&\n        channel['itunes:image'][0].$ &&\n        channel['itunes:image'][0].$.href);\n      image = hasImageHref ? channel['itunes:image'][0].$.href : null;\n      if (image) {\n        feed.itunes.image = image;\n      }\n    }\n\n    if (channel['itunes:category']) {\n      const categoriesWithSubs = channel['itunes:category'].map((category) => {\n        return {\n          name: category && category.$ && category.$.text,\n          subs: category['itunes:category'] ?\n            category['itunes:category']\n              .map((subcategory) => ({\n                name: subcategory && subcategory.$ && subcategory.$.text\n              })) : null,\n        };\n      });\n\n      feed.itunes.categories = categoriesWithSubs.map((category) => category.name);\n      feed.itunes.categoriesWithSubs = categoriesWithSubs;\n    }\n\n    if (channel['itunes:keywords']) {\n      if (channel['itunes:keywords'].length > 1) {\n        feed.itunes.keywords = channel['itunes:keywords'].map(\n          keyword => keyword && keyword.$ && keyword.$.text\n        );\n      } else {\n        let keywords = channel['itunes:keywords'][0];\n        if (keywords && typeof keywords._ === 'string') {\n          keywords = keywords._;\n        }\n\n        if (keywords && keywords.$ && keywords.$.text) {\n          feed.itunes.keywords = keywords.$.text.split(',')\n        } else if (typeof keywords === \"string\") {\n          feed.itunes.keywords = keywords.split(',');\n        }\n      }\n    }\n\n    utils.copyFromXML(channel, feed.itunes, fields.podcastFeed);\n    items.forEach((item, index) => {\n      let entry = feed.items[index];\n      entry.itunes = {};\n      utils.copyFromXML(item, entry.itunes, fields.podcastItem);\n      let image = item['itunes:image'];\n      if (image && image[0] && image[0].$ && image[0].$.href) {\n        entry.itunes.image = image[0].$.href;\n      }\n    });\n  }\n\n  setISODate(item) {\n    let date = item.pubDate || item.date;\n    if (date) {\n      try {\n        item.isoDate = new Date(date.trim()).toISOString();\n      } catch (e) {\n        // Ignore bad date format\n      }\n    }\n  }\n\n  /**\n   * Generates a pagination object where the rel attribute is the key and href attribute is the value\n   *  { self: 'self-url', first: 'first-url', ...  }\n   *\n   * @access private\n   * @param {Object} channel parsed XML\n   * @returns {Object}\n   */\n  generatePaginationLinks(channel) {\n    if (!channel['atom:link']) {\n      return {};\n    }\n    const paginationRelAttributes = ['self', 'first', 'next', 'prev', 'last'];\n\n    return channel['atom:link'].reduce((paginationLinks, link) => {\n      if (!link.$ || !paginationRelAttributes.includes(link.$.rel)) {\n        return paginationLinks;\n      }\n      paginationLinks[link.$.rel] = link.$.href;\n      return paginationLinks;\n    }, {});\n  }\n}\n\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/utils.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/utils.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const utils = module.exports = {};\nconst entities = __webpack_require__(/*! entities */ \"(rsc)/./node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/index.js\");\nconst xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/.pnpm/xml2js@0.5.0/node_modules/xml2js/lib/xml2js.js\");\n\nutils.stripHtml = function(str) {\n  str = str.replace(/([^\\n])<\\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\\n)*?>([^\\n])/gm, '$1\\n$3')\n  str = str.replace(/<(?:.|\\n)*?>/gm, '');\n  return str;\n}\n\nutils.getSnippet = function(str) {\n  return entities.decodeHTML(utils.stripHtml(str)).trim();\n}\n\nutils.getLink = function(links, rel, fallbackIdx) {\n  if (!links) return;\n  for (let i = 0; i < links.length; ++i) {\n    if (links[i].$.rel === rel) return links[i].$.href;\n  }\n  if (links[fallbackIdx]) return links[fallbackIdx].$.href;\n}\n\nutils.getContent = function(content) {\n  if (typeof content._ === 'string') {\n    return content._;\n  } else if (typeof content === 'object') {\n    let builder = new xml2js.Builder({headless: true, explicitRoot: true, rootName: 'div', renderOpts: {pretty: false}});\n    return builder.buildObject(content);\n  } else {\n    return content;\n  }\n}\n\nutils.copyFromXML = function(xml, dest, fields) {\n  fields.forEach(function(f) {\n    let from = f;\n    let to = f;\n    let options = {};\n    if (Array.isArray(f)) {\n      from = f[0];\n      to = f[1];\n      if (f.length > 2) {\n        options = f[2];\n      }\n    }\n    const { keepArray, includeSnippet } = options;\n    if (xml[from] !== undefined){\n      dest[to] = keepArray ? xml[from] : xml[from][0];\n    }\n    if (dest[to] && typeof dest[to]._ === 'string') {\n      dest[to]=dest[to]._;\n    }\n    if (includeSnippet && dest[to] && typeof dest[to] === 'string') {\n      dest[to + 'Snippet'] = utils.getSnippet(dest[to]);\n    }\n  })\n}\n\nutils.maybePromisify = function(callback, promise) {\n  if (!callback) return promise;\n  return promise.then(\n    data => setTimeout(() => callback(null, data)),\n    err => setTimeout(() => callback(err))\n  );\n}\n\nconst DEFAULT_ENCODING = 'utf8';\nconst ENCODING_REGEX = /(encoding|charset)\\s*=\\s*(\\S+)/;\nconst SUPPORTED_ENCODINGS = ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'latin1', 'binary', 'hex'];\nconst ENCODING_ALIASES = {\n  'utf-8': 'utf8',\n  'iso-8859-1': 'latin1',\n}\n\nutils.getEncodingFromContentType = function(contentType) {\n  contentType = contentType || '';\n  let match = contentType.match(ENCODING_REGEX);\n  let encoding = (match || [])[2] || '';\n  encoding = encoding.toLowerCase();\n  encoding = ENCODING_ALIASES[encoding] || encoding;\n  if (!encoding || SUPPORTED_ENCODINGS.indexOf(encoding) === -1) {\n    encoding = DEFAULT_ENCODING;\n  }\n  return encoding;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcnNzLXBhcnNlckAzLjEzLjAvbm9kZV9tb2R1bGVzL3Jzcy1wYXJzZXIvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsOEZBQVU7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLHlGQUFROztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osc0NBQXNDLGtFQUFrRSxlQUFlO0FBQ3ZIO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2NoaWJhaGVpdGFyb3UvaGVpLWdha3VzZWl0ZW5zaG9rdS9hbGxfZ2FrdXNlaXRlbnNob2t1L25vZGVfbW9kdWxlcy8ucG5wbS9yc3MtcGFyc2VyQDMuMTMuMC9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdXRpbHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuY29uc3QgZW50aXRpZXMgPSByZXF1aXJlKCdlbnRpdGllcycpO1xuY29uc3QgeG1sMmpzID0gcmVxdWlyZSgneG1sMmpzJyk7XG5cbnV0aWxzLnN0cmlwSHRtbCA9IGZ1bmN0aW9uKHN0cikge1xuICBzdHIgPSBzdHIucmVwbGFjZSgvKFteXFxuXSk8XFwvPyhofGJyfHB8dWx8b2x8bGl8YmxvY2txdW90ZXxzZWN0aW9ufHRhYmxlfHRyfGRpdikoPzoufFxcbikqPz4oW15cXG5dKS9nbSwgJyQxXFxuJDMnKVxuICBzdHIgPSBzdHIucmVwbGFjZSgvPCg/Oi58XFxuKSo/Pi9nbSwgJycpO1xuICByZXR1cm4gc3RyO1xufVxuXG51dGlscy5nZXRTbmlwcGV0ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBlbnRpdGllcy5kZWNvZGVIVE1MKHV0aWxzLnN0cmlwSHRtbChzdHIpKS50cmltKCk7XG59XG5cbnV0aWxzLmdldExpbmsgPSBmdW5jdGlvbihsaW5rcywgcmVsLCBmYWxsYmFja0lkeCkge1xuICBpZiAoIWxpbmtzKSByZXR1cm47XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobGlua3NbaV0uJC5yZWwgPT09IHJlbCkgcmV0dXJuIGxpbmtzW2ldLiQuaHJlZjtcbiAgfVxuICBpZiAobGlua3NbZmFsbGJhY2tJZHhdKSByZXR1cm4gbGlua3NbZmFsbGJhY2tJZHhdLiQuaHJlZjtcbn1cblxudXRpbHMuZ2V0Q29udGVudCA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgaWYgKHR5cGVvZiBjb250ZW50Ll8gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQuXztcbiAgfSBlbHNlIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcpIHtcbiAgICBsZXQgYnVpbGRlciA9IG5ldyB4bWwyanMuQnVpbGRlcih7aGVhZGxlc3M6IHRydWUsIGV4cGxpY2l0Um9vdDogdHJ1ZSwgcm9vdE5hbWU6ICdkaXYnLCByZW5kZXJPcHRzOiB7cHJldHR5OiBmYWxzZX19KTtcbiAgICByZXR1cm4gYnVpbGRlci5idWlsZE9iamVjdChjb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxufVxuXG51dGlscy5jb3B5RnJvbVhNTCA9IGZ1bmN0aW9uKHhtbCwgZGVzdCwgZmllbGRzKSB7XG4gIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcbiAgICBsZXQgZnJvbSA9IGY7XG4gICAgbGV0IHRvID0gZjtcbiAgICBsZXQgb3B0aW9ucyA9IHt9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KGYpKSB7XG4gICAgICBmcm9tID0gZlswXTtcbiAgICAgIHRvID0gZlsxXTtcbiAgICAgIGlmIChmLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgb3B0aW9ucyA9IGZbMl07XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsga2VlcEFycmF5LCBpbmNsdWRlU25pcHBldCB9ID0gb3B0aW9ucztcbiAgICBpZiAoeG1sW2Zyb21dICE9PSB1bmRlZmluZWQpe1xuICAgICAgZGVzdFt0b10gPSBrZWVwQXJyYXkgPyB4bWxbZnJvbV0gOiB4bWxbZnJvbV1bMF07XG4gICAgfVxuICAgIGlmIChkZXN0W3RvXSAmJiB0eXBlb2YgZGVzdFt0b10uXyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRlc3RbdG9dPWRlc3RbdG9dLl87XG4gICAgfVxuICAgIGlmIChpbmNsdWRlU25pcHBldCAmJiBkZXN0W3RvXSAmJiB0eXBlb2YgZGVzdFt0b10gPT09ICdzdHJpbmcnKSB7XG4gICAgICBkZXN0W3RvICsgJ1NuaXBwZXQnXSA9IHV0aWxzLmdldFNuaXBwZXQoZGVzdFt0b10pO1xuICAgIH1cbiAgfSlcbn1cblxudXRpbHMubWF5YmVQcm9taXNpZnkgPSBmdW5jdGlvbihjYWxsYmFjaywgcHJvbWlzZSkge1xuICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gcHJvbWlzZTtcbiAgcmV0dXJuIHByb21pc2UudGhlbihcbiAgICBkYXRhID0+IHNldFRpbWVvdXQoKCkgPT4gY2FsbGJhY2sobnVsbCwgZGF0YSkpLFxuICAgIGVyciA9PiBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKGVycikpXG4gICk7XG59XG5cbmNvbnN0IERFRkFVTFRfRU5DT0RJTkcgPSAndXRmOCc7XG5jb25zdCBFTkNPRElOR19SRUdFWCA9IC8oZW5jb2Rpbmd8Y2hhcnNldClcXHMqPVxccyooXFxTKykvO1xuY29uc3QgU1VQUE9SVEVEX0VOQ09ESU5HUyA9IFsnYXNjaWknLCAndXRmOCcsICd1dGYxNmxlJywgJ3VjczInLCAnYmFzZTY0JywgJ2xhdGluMScsICdiaW5hcnknLCAnaGV4J107XG5jb25zdCBFTkNPRElOR19BTElBU0VTID0ge1xuICAndXRmLTgnOiAndXRmOCcsXG4gICdpc28tODg1OS0xJzogJ2xhdGluMScsXG59XG5cbnV0aWxzLmdldEVuY29kaW5nRnJvbUNvbnRlbnRUeXBlID0gZnVuY3Rpb24oY29udGVudFR5cGUpIHtcbiAgY29udGVudFR5cGUgPSBjb250ZW50VHlwZSB8fCAnJztcbiAgbGV0IG1hdGNoID0gY29udGVudFR5cGUubWF0Y2goRU5DT0RJTkdfUkVHRVgpO1xuICBsZXQgZW5jb2RpbmcgPSAobWF0Y2ggfHwgW10pWzJdIHx8ICcnO1xuICBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGVuY29kaW5nID0gRU5DT0RJTkdfQUxJQVNFU1tlbmNvZGluZ10gfHwgZW5jb2Rpbmc7XG4gIGlmICghZW5jb2RpbmcgfHwgU1VQUE9SVEVEX0VOQ09ESU5HUy5pbmRleE9mKGVuY29kaW5nKSA9PT0gLTEpIHtcbiAgICBlbmNvZGluZyA9IERFRkFVTFRfRU5DT0RJTkc7XG4gIH1cbiAgcmV0dXJuIGVuY29kaW5nO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/rss-parser@3.13.0/node_modules/rss-parser/lib/utils.js\n");

/***/ })

};
;