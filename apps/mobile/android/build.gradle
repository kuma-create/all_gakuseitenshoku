apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
  entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
  reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
  hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
  codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

  enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
  // Use Expo CLI to bundle the app
  cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
  bundleCommand = "export:embed"

  autolinkLibrariesWithApp()
}

// Hermes/JSC
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
// JSC fallback if Hermes disabled
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
  ndkVersion rootProject.ext.ndkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  compileSdk rootProject.ext.compileSdkVersion

  namespace 'co.gakuten.app'

  defaultConfig {
    applicationId 'co.gakuten.app'
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0.0"
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      signingConfig signingConfigs.debug
      shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
    }
  }

  packagingOptions {
    jniLibs { useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false) }
  }

  androidResources { ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~' }
}

// Apply static values from gradle.properties to android.packagingOptions
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
  def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",")
  for (i in 0..<options.size()) options[i] = options[i].trim()
  options -= ""
  if (options.length > 0) {
    options.each { android.packagingOptions[prop] += it }
  }
}

dependencies {
  implementation("com.facebook.react:react-android")

  def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
  def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
  def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

  if (isGifEnabled) {
    implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
  }

  if (isWebpEnabled) {
    implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
    if (isWebpAnimatedEnabled) {
      implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
    }
  }

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
}

// --- FIX: force-patch autolinking import (expo.core -> expo.modules.core) OR drop it if class is missing
// (App module variant)

def genAutolinkDir = "$project.buildDir/generated/autolinking/src/main/java/com/facebook/react"

tasks.register("patchAutolinking") {
  dependsOn("generateAutolinkingPackageList")
  doLast {
    def pkgList = file("$genAutolinkDir/PackageList.java")
    if (pkgList.exists()) {
      def txt = pkgList.getText("UTF-8")
      def fixed = txt.replace("import expo.core.ExpoModulesPackage;", "import expo.modules.core.ExpoModulesPackage;")
      // If the correct class still isn't present on classpath, drop import & constructor entry
      if (!fileTree("${rootDir}").matching { include "**/expo-modules-core*/**/*.jar", "**/expo-modules-core*/**/*.aar" }.files.any { it.name.contains("expo-modules-core") }) {
        fixed = fixed
          .replaceAll(/\n\s*import\s+expo\.modules\.core\.ExpoModulesPackage;\n/, "\n")
          .replaceAll(/\n\s*new\s+ExpoModulesPackage\(\),?\n/, "\n")
      }
      if (txt != fixed) {
        pkgList.write(fixed, "UTF-8")
        println("[fix] Patched PackageList.java (app): import path and/or removed ExpoModulesPackage")
      } else {
        println("[fix] PackageList.java (app) already correct")
      }
    } else {
      println("[fix] PackageList.java (app) not found yet at: ${pkgList.path}")
    }
  }
}

tasks.matching { it.name in ["compileReleaseJavaWithJavac", "compileDebugJavaWithJavac", "compileReleaseSources", "compileDebugSources"] }.configureEach {
  it.dependsOn("patchAutolinking")
}
// --- END FIX
