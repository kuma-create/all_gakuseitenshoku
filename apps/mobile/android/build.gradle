// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext {
    // Expo SDK 53 defaults (match EAS logs)
    buildToolsVersion = findProperty('android.buildToolsVersion') ?: '35.0.0'
    minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '24')
    compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '35')
    targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '35')
    ndkVersion = findProperty('android.ndkVersion') ?: '27.1.12297006'
    kotlinVersion = findProperty('android.kotlinVersion') ?: '2.0.21'
  }
  repositories {
    google()
    mavenCentral()
  }
  dependencies {
    classpath('com.android.tools.build:gradle:8.6.0')
    classpath('com.facebook.react:react-native-gradle-plugin')
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
  }
}

// Resolve RN android dir for maven repo
def reactNativeAndroidDir = new File(
  providers.exec {
    workingDir(rootDir)
    commandLine("node", "--print", "require.resolve('react-native/package.json')")
  }.standardOutput.asText.get().trim(),
  "../android"
)

allprojects {
  repositories {
    // React Native (Android binaries) from npm
    maven { url(reactNativeAndroidDir) }
    google()
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
  }
}

apply plugin: "expo-root-project"
apply plugin: "com.facebook.react.rootproject"

// --- FIX: force-patch autolinking import (expo.core -> expo.modules.core) OR drop it if class is missing
// (Runs in root project, but targets app module generated sources.)

def genAutolinkDir = "$project.buildDir/generated/autolinking/src/main/java/com/facebook/react"

tasks.register("patchAutolinking") {
  // Ensure app module generated sources exist first
  dependsOn(":app:generateAutolinkingPackageList")
  doLast {
    def pkgList = file("$genAutolinkDir/PackageList.java")
    if (pkgList.exists()) {
      def txt = pkgList.getText("UTF-8")
      def fixed = txt
        .replace("import expo.core.ExpoModulesPackage;", "import expo.modules.core.ExpoModulesPackage;")

      // If the correct class still isn't present on classpath, drop import & constructor entry
      if (!fileTree("${rootDir}").matching { include "**/expo-modules-core*/**/*.jar", "**/expo-modules-core*/**/*.aar" }.files.any { it.name.contains("expo-modules-core") }) {
        fixed = fixed
          .replaceAll(/\n\s*import\s+expo\.modules\.core\.ExpoModulesPackage;\n/, "\n")
          .replaceAll(/\n\s*new\s+ExpoModulesPackage\(\),?\n/, "\n")
      }

      if (txt != fixed) {
        pkgList.write(fixed, "UTF-8")
        println("[fix] Patched (root) PackageList.java: import path and/or removed ExpoModulesPackage")
      } else {
        println("[fix] (root) PackageList.java already correct")
      }
    } else {
      println("[fix] (root) PackageList.java not found yet at: ${pkgList.path}")
    }
  }
}

tasks.matching { it.name in [
  "compileReleaseJavaWithJavac", "compileDebugJavaWithJavac",
  "compileReleaseSources", "compileDebugSources"
] }.configureEach {
  it.dependsOn(":app:patchAutolinking")
}
// --- END FIX
