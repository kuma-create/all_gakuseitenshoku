// キャリアスコア計算ロジック（日本語版）

export type 自己分析データ = {
  // 自己分析データ
  強み: string[];
  弱み: string[];
  価値観: string[];
  ライフイベント: Array<{
    年: number;
    イベント: string;
    影響度: number;
    カテゴリ: string;
  }>;
  将来ビジョン: {
    短期目標: string;
    長期目標: string;
    志望業界: string;
    志望職種: string;
  };
  経験: Array<{
    タイトル: string;
    説明: string;
    スキル: string[];
    '影響・成果': string;
    '学び・気づき': string;
    期間_月数: number;
    カテゴリ: '学業' | '仕事' | 'ボランティア' | '個人' | 'リーダーシップ';
  }>;
};

export type 選考データ = {
  // 選考管理データ
  企業リスト: Array<{
    id: string;
    ステータス: '応募済み' | '選考中' | '最終面接' | '内定' | '不合格' | '辞退';
    優先度: '第一志望' | '第二志望' | '練習';
    業界: string;
    規模: 'スタートアップ' | '中小企業' | '大企業' | '超大手企業';
    選考段階リスト: Array<{
      ステータス: '待機中' | '通過' | '不通過' | '予定';
      評価?: number;
      フィードバック?: string;
    }>;
    総合評価?: number;
  }>;
};

export type 活動データ = {
  // 学習活動データ
  ケース練習数: number;
  ケース正答数: number;
  自己分析完成度: number;
  ネットワーキング参加回数: number;
  面接練習回数: number;
  スキル評価リスト: Array<{
    スキル名: string;
    スコア: number;
    評価日: string;
  }>;
  ピアレビューリスト: Array<{
    評価: number;
    カテゴリ: 'コミュニケーション' | '論理性' | 'リーダーシップ' | '適合性' | '活力';
  }>;
  最終活動日: string;
  連続活動日数: number;
};

export type キャリアスコア = {
  総合スコア: number;
  詳細スコア: {
    コミュニケーション: number;
    論理性: number;
    リーダーシップ: number;
    適合性: number;
    活力: number;
  };
  分析結果: {
    強み: string[];
    改善点: string[];
    推奨アクション: string[];
  };
  トレンド: '上昇' | '下降' | '横ばい';
  最終更新日: string;
};

// --- English interface used by React components ---
export type CareerScore = {
  overall: number;
  breakdown: {
    Communication: number;
    Logic: number;
    Leadership: number;
    Fit: number;
    Vitality: number;
  };
  insights: {
    strengths: string[];
    improvements: string[];
    recommendations: string[];
  };
  trend: 'up' | 'down' | 'stable';
  lastUpdated: string;
};

// ウェイト設定
const スコア重み = {
  自己分析: 0.25,      // 自己分析の完成度
  選考実績: 0.30,      // 選考実績・進捗
  学習活動: 0.25,      // 学習・練習活動
  外部評価: 0.20       // 外部評価（ピアレビューなど）
};

const 軸別重み = {
  コミュニケーション: {
    自己分析での強み: 0.2,
    ピアレビュー: 0.4,
    面接成功率: 0.25,
    ネットワーキング活動: 0.15
  },
  論理性: {
    ケース問題成績: 0.4,
    分析的思考: 0.3,
    問題解決力: 0.2,
    構造化思考: 0.1
  },
  リーダーシップ: {
    リーダーシップ経験: 0.4,
    チームワークスキル: 0.25,
    主体性: 0.2,
    影響力: 0.15
  },
  適合性: {
    業界適合度: 0.3,
    価値観適合度: 0.25,
    企業文化適合度: 0.25,
    キャリアビジョン: 0.2
  },
  活力: {
    継続性: 0.3,
    成長力: 0.25,
    困難克服力: 0.25,
    適応力: 0.2
  }
};

/**
 * 自己分析データからスコアを計算
 */
function 自己分析スコア計算(データ: 自己分析データ): number {
  let スコア = 0;
  let 最大スコア = 0;

  // 基本完成度チェック
  if (データ.強み.length >= 3) スコア += 20; 最大スコア += 20;
  if (データ.弱み.length >= 2) スコア += 15; 最大スコア += 15;
  if (データ.価値観.length >= 3) スコア += 15; 最大スコア += 15;
  if (データ.将来ビジョン.短期目標 && データ.将来ビジョン.長期目標) スコア += 20; 最大スコア += 20;
  
  // 経験の質と量
  const 質の高い経験数 = データ.経験.filter(経験 => 
    経験.スキル.length >= 2 && 経験['影響・成果'] && 経験['学び・気づき']
  ).length;
  スコア += Math.min(質の高い経験数 * 5, 30); 最大スコア += 30;

  return 最大スコア > 0 ? (スコア / 最大スコア) * 100 : 0;
}

/**
 * 選考管理データからスコアを計算
 */
function 選考実績スコア計算(データ: 選考データ): number {
  if (データ.企業リスト.length === 0) return 0;

  let スコア = 0;
  let 最大スコア = 0;

  // 応募の質と量
  const アクティブ応募数 = データ.企業リスト.filter(企業 => 
    企業.ステータス !== '辞退' && 企業.ステータス !== '不合格'
  ).length;
  スコア += Math.min(アクティブ応募数 * 10, 40); 最大スコア += 40;

  // 選考通過率
  const 通過段階数 = データ.企業リスト.flatMap(企業 => 企業.選考段階リスト).filter(段階 => 段階.ステータス === '通過').length;
  const 総段階数 = データ.企業リスト.flatMap(企業 => 企業.選考段階リスト).length;
  if (総段階数 > 0) {
    スコア += (通過段階数 / 総段階数) * 30; 最大スコア += 30;
  }

  // 内定・最終面接率
  const 内定数 = データ.企業リスト.filter(企業 => 企業.ステータス === '内定').length;
  const 最終面接数 = データ.企業リスト.filter(企業 => 企業.ステータス === '最終面接').length;
  スコア += Math.min((内定数 + 最終面接数) * 15, 30); 最大スコア += 30;

  return 最大スコア > 0 ? (スコア / 最大スコア) * 100 : 0;
}

/**
 * 学習活動データからスコアを計算
 */
function 学習活動スコア計算(データ: 活動データ): number {
  let スコア = 0;
  let 最大スコア = 0;

  // ケース練習実績
  if (データ.ケース練習数 > 0) {
    const 正答率 = データ.ケース正答数 / データ.ケース練習数;
    スコア += 正答率 * 25 + Math.min(データ.ケース練習数, 20); 最大スコア += 45;
  } else {
    最大スコア += 45;
  }

  // 自己分析完成度
  スコア += データ.自己分析完成度 * 0.2; 最大スコア += 20;

  // 継続性
  スコア += Math.min(データ.連続活動日数 * 2, 20); 最大スコア += 20;

  // 学習の幅
  const スキル種類数 = new Set(データ.スキル評価リスト.map(評価 => 評価.スキル名)).size;
  スコア += Math.min(スキル種類数 * 3, 15); 最大スコア += 15;

  return 最大スコア > 0 ? (スコア / 最大スコア) * 100 : 0;
}

/**
 * 外部評価データからスコアを計算
 */
function 外部評価スコア計算(データ: 活動データ): number {
  if (データ.ピアレビューリスト.length === 0) return 50; // デフォルト値

  const 平均評価 = データ.ピアレビューリスト.reduce((合計, レビュー) => 合計 + レビュー.評価, 0) / データ.ピアレビューリスト.length;
  return (平均評価 / 5) * 100;
}

/**
 * 各軸のスコアを計算
 */
function 軸別スコア計算(
  自己分析データ: 自己分析データ,
  選考データ: 選考データ,
  活動データ: 活動データ
): キャリアスコア['詳細スコア'] {
  
  // コミュニケーションスコア
  const コミュニケーションスコア = (
    コミュニケーション_自己分析評価(自己分析データ) * 軸別重み.コミュニケーション.自己分析での強み +
    コミュニケーション_ピアレビュー評価(活動データ) * 軸別重み.コミュニケーション.ピアレビュー +
    面接成功率計算(選考データ) * 軸別重み.コミュニケーション.面接成功率 +
    ネットワーキング活動評価(活動データ) * 軸別重み.コミュニケーション.ネットワーキング活動
  );

  // 論理性スコア
  const 論理性スコア = (
    ケース成績評価(活動データ) * 軸別重み.論理性.ケース問題成績 +
    分析的思考評価(自己分析データ) * 軸別重み.論理性.分析的思考 +
    問題解決力評価(自己分析データ) * 軸別重み.論理性.問題解決力 +
    60 * 軸別重み.論理性.構造化思考 // デフォルト値
  );

  // リーダーシップスコア
  const リーダーシップスコア = (
    リーダーシップ経験評価(自己分析データ) * 軸別重み.リーダーシップ.リーダーシップ経験 +
    チームワークスキル評価(自己分析データ) * 軸別重み.リーダーシップ.チームワークスキル +
    主体性評価(自己分析データ) * 軸別重み.リーダーシップ.主体性 +
    影響力評価(自己分析データ) * 軸別重み.リーダーシップ.影響力
  );

  // 適合性スコア
  const 適合性スコア = (
    業界適合度評価(自己分析データ, 選考データ) * 軸別重み.適合性.業界適合度 +
    価値観適合度評価(自己分析データ) * 軸別重み.適合性.価値観適合度 +
    企業文化適合度評価(選考データ) * 軸別重み.適合性.企業文化適合度 +
    キャリアビジョン評価(自己分析データ) * 軸別重み.適合性.キャリアビジョン
  );

  // 活力スコア
  const 活力スコア = (
    継続性評価(活動データ) * 軸別重み.活力.継続性 +
    成長力評価(活動データ, 選考データ) * 軸別重み.活力.成長力 +
    困難克服力評価(選考データ) * 軸別重み.活力.困難克服力 +
    適応力評価(自己分析データ) * 軸別重み.活力.適応力
  );

  return {
    コミュニケーション: Math.round(コミュニケーションスコア),
    論理性: Math.round(論理性スコア),
    リーダーシップ: Math.round(リーダーシップスコア),
    適合性: Math.round(適合性スコア),
    活力: Math.round(活力スコア)
  };
}

// 各軸の詳細計算関数
function コミュニケーション_自己分析評価(データ: 自己分析データ): number {
  const コミュ関連強み = データ.強み.filter(強み => 
    強み.includes('コミュニケーション') || 強み.includes('伝える') || 強み.includes('説明') || 強み.includes('プレゼン')
  ).length;
  return Math.min(コミュ関連強み * 25, 100);
}

function コミュニケーション_ピアレビュー評価(データ: 活動データ): number {
  const コミュレビュー = データ.ピアレビューリスト.filter(レビュー => レビュー.カテゴリ === 'コミュニケーション');
  if (コミュレビュー.length === 0) return 60;
  const 平均 = コミュレビュー.reduce((合計, レビュー) => 合計 + レビュー.評価, 0) / コミュレビュー.length;
  return (平均 / 5) * 100;
}

function 面接成功率計算(データ: 選考データ): number {
  const 面接段階 = データ.企業リスト.flatMap(企業 => 企業.選考段階リスト).filter(段階 => 
    段階.ステータス === '通過' && (段階.フィードバック?.includes('面接') || 段階.フィードバック?.includes('interview'))
  );
  const 平均評価 = 面接段階.filter(段階 => 段階.評価).reduce((合計, 段階) => 合計 + (段階.評価 || 0), 0) / 面接段階.length;
  return isNaN(平均評価) ? 60 : (平均評価 / 5) * 100;
}

function ネットワーキング活動評価(データ: 活動データ): number {
  return Math.min(データ.ネットワーキング参加回数 * 20, 100);
}

function ケース成績評価(データ: 活動データ): number {
  if (データ.ケース練習数 === 0) return 50;
  return (データ.ケース正答数 / データ.ケース練習数) * 100;
}

function 分析的思考評価(データ: 自己分析データ): number {
  const 分析関連経験 = データ.経験.filter(経験 => 
    経験.スキル.some(スキル => スキル.includes('分析') || スキル.includes('データ') || スキル.includes('論理'))
  ).length;
  return Math.min(分析関連経験 * 20, 100);
}

function 問題解決力評価(データ: 自己分析データ): number {
  const 問題解決経験 = データ.経験.filter(経験 => 
    経験['影響・成果'] && (経験.説明.includes('課題') || 経験.説明.includes('問題'))
  ).length;
  return Math.min(問題解決経験 * 25, 100);
}

function リーダーシップ経験評価(データ: 自己分析データ): number {
  const リーダー経験 = データ.経験.filter(経験 => 経験.カテゴリ === 'リーダーシップ').length;
  return Math.min(リーダー経験 * 30, 100);
}

function チームワークスキル評価(データ: 自己分析データ): number {
  const チーム経験 = データ.経験.filter(経験 => 
    経験.スキル.some(スキル => スキル.includes('チーム') || スキル.includes('協力') || スキル.includes('連携'))
  ).length;
  return Math.min(チーム経験 * 25, 100);
}

function 主体性評価(データ: 自己分析データ): number {
  const 主体性経験 = データ.経験.filter(経験 => 
    経験.説明.includes('主導') || 経験.説明.includes('率先') || 経験.説明.includes('企画')
  ).length;
  return Math.min(主体性経験 * 30, 100);
}

function 影響力評価(データ: 自己分析データ): number {
  const 影響力経験 = データ.経験.filter(経験 => 
    経験['影響・成果'] && (経験['影響・成果'].includes('影響') || 経験['影響・成果'].includes('変化') || 経験['影響・成果'].includes('改善'))
  ).length;
  return Math.min(影響力経験 * 25, 100);
}

function 業界適合度評価(自己分析データ: 自己分析データ, 選考データ: 選考データ): number {
  const 志望業界 = 自己分析データ.将来ビジョン.志望業界;
  if (!志望業界) return 50;
  
  const 適合応募数 = 選考データ.企業リスト.filter(企業 => 企業.業界 === 志望業界).length;
  const 総応募数 = 選考データ.企業リスト.length;
  
  return 総応募数 > 0 ? (適合応募数 / 総応募数) * 100 : 50;
}

function 価値観適合度評価(データ: 自己分析データ): number {
  return データ.価値観.length >= 3 ? 80 : データ.価値観.length * 25;
}

function 企業文化適合度評価(データ: 選考データ): number {
  const 高評価企業数 = データ.企業リスト.filter(企業 => (企業.総合評価 || 0) >= 4).length;
  const 評価済み企業数 = データ.企業リスト.filter(企業 => 企業.総合評価).length;
  
  return 評価済み企業数 > 0 ? (高評価企業数 / 評価済み企業数) * 100 : 60;
}

function キャリアビジョン評価(データ: 自己分析データ): number {
  const 短期目標有り = データ.将来ビジョン.短期目標?.length > 0;
  const 長期目標有り = データ.将来ビジョン.長期目標?.length > 0;
  const 志望業界有り = データ.将来ビジョン.志望業界?.length > 0;
  const 志望職種有り = データ.将来ビジョン.志望職種?.length > 0;
  
  return (Number(短期目標有り) + Number(長期目標有り) + Number(志望業界有り) + Number(志望職種有り)) * 25;
}

function 継続性評価(データ: 活動データ): number {
  return Math.min(データ.連続活動日数 * 3, 100);
}

function 成長力評価(活動データ: 活動データ, 選考データ: 選考データ): number {
  // 時系列でのスキルスコア向上を計算
  const スキル成長度 = 活動データ.スキル評価リスト.length > 1 ? 75 : 50;
  
  // 選考での段階的成功を計算
  const 進行中応募数 = 選考データ.企業リスト.filter(企業 => 
    企業.ステータス === '選考中' || 企業.ステータス === '最終面接' || 企業.ステータス === '内定'
  ).length;
  
  return Math.min(スキル成長度 + 進行中応募数 * 10, 100);
}

function 困難克服力評価(データ: 選考データ): number {
  const 不合格数 = データ.企業リスト.filter(企業 => 企業.ステータス === '不合格').length;
  const アクティブ数 = データ.企業リスト.filter(企業 => 
    企業.ステータス !== '不合格' && 企業.ステータス !== '辞退'
  ).length;
  
  // 挫折後も活動を継続している場合は高評価
  return 不合格数 > 0 && アクティブ数 > 0 ? 85 : 70;
}

function 適応力評価(データ: 自己分析データ): number {
  const 多様な経験数 = new Set(データ.経験.map(経験 => 経験.カテゴリ)).size;
  return Math.min(多様な経験数 * 20, 100);
}

/**
 * 分析結果とおすすめアクションを生成
 */
function 分析結果生成(
  詳細スコア: キャリアスコア['詳細スコア'],
  自己分析データ: 自己分析データ,
  選考データ: 選考データ,
  活動データ: 活動データ
): キャリアスコア['分析結果'] {
  const スコア値リスト = Object.values(詳細スコア);
  const 平均スコア = スコア値リスト.reduce((合計, スコア) => 合計 + スコア, 0) / スコア値リスト.length;
  
  const 強みリスト: string[] = [];
  const 改善点リスト: string[] = [];
  const 推奨アクションリスト: string[] = [];

  // 強み分析
  Object.entries(詳細スコア).forEach(([軸名, スコア]) => {
    if (スコア >= 平均スコア + 10) {
      強みリスト.push(`${軸名}が強み`);
    } else if (スコア <= 平均スコア - 10) {
      改善点リスト.push(`${軸名}の向上が必要`);
    }
  });

  // 推奨アクション生成
  if (詳細スコア.コミュニケーション < 70) {
    推奨アクションリスト.push('ピアレビューを積極的に活用しましょう');
  }
  if (詳細スコア.論理性 < 70) {
    推奨アクションリスト.push('ケース問題の練習を増やしましょう');
  }
  if (詳細スコア.リーダーシップ < 70) {
    推奨アクションリスト.push('リーダーシップ経験を整理し直しましょう');
  }
  if (詳細スコア.適合性 < 70) {
    推奨アクションリスト.push('志望業界・企業の研究を深めましょう');
  }
  if (詳細スコア.活力 < 70) {
    推奨アクションリスト.push('継続的な学習習慣を身につけましょう');
  }

  // 全体的な推奨アクション
  if (選考データ.企業リスト.length < 5) {
    推奨アクションリスト.push('応募企業数を増やすことを検討しましょう');
  }
  if (活動データ.ケース練習数 < 10) {
    推奨アクションリスト.push('ケース問題の練習量を増やしましょう');
  }

  return {
    強み: 強みリスト.slice(0, 3),
    改善点: 改善点リスト.slice(0, 3),
    推奨アクション: 推奨アクションリスト.slice(0, 3)
  };
}

/**
 * トレンド分析
 */
function トレンド計算(
  現在スコア: number,
  履歴スコアリスト: number[]
): '上昇' | '下降' | '横ばい' {
  if (履歴スコアリスト.length < 2) return '横ばい';
  
  const 最近の傾向 = 履歴スコアリスト.slice(-3);
  const 傾き = 最近の傾向.length > 1 ?
    (最近の傾向[最近の傾向.length - 1] - 最近の傾向[0]) / (最近の傾向.length - 1) : 0;
  
  if (傾き > 2) return '上昇';
  if (傾き < -2) return '下降';
  return '横ばい';
}

/**
 * メインのキャリアスコア計算関数
 */
export function キャリアスコア計算(
  自己分析データ: 自己分析データ,
  選考データ: 選考データ,
  活動データ: 活動データ,
  履歴スコアリスト: number[] = []
): キャリアスコア {
  
  // 各カテゴリのスコア計算
  const 自己分析スコア = 自己分析スコア計算(自己分析データ);
  const 選考実績スコア = 選考実績スコア計算(選考データ);
  const 学習活動スコア = 学習活動スコア計算(活動データ);
  const 外部評価スコア = 外部評価スコア計算(活動データ);
  
  // 総合スコア計算
  const 総合スコア = Math.round(
    自己分析スコア * スコア重み.自己分析 +
    選考実績スコア * スコア重み.選考実績 +
    学習活動スコア * スコア重み.学習活動 +
    外部評価スコア * スコア重み.外部評価
  );
  
  // 各軸のスコア計算
  const 詳細スコア = 軸別スコア計算(自己分析データ, 選考データ, 活動データ);
  
  // 分析結果生成
  const 分析結果 = 分析結果生成(詳細スコア, 自己分析データ, 選考データ, 活動データ);
  
  // トレンド分析
  const トレンド = トレンド計算(総合スコア, 履歴スコアリスト);
  
  return {
    総合スコア,
    詳細スコア,
    分析結果,
    トレンド,
    最終更新日: new Date().toISOString()
  };
}

/**
 * デモデータでのキャリアスコア計算
 */
export function デモキャリアスコア計算(): キャリアスコア {
  const デモ自己分析データ: 自己分析データ = {
    強み: ['論理的思考', 'コミュニケーション能力', '継続力'],
    弱み: ['完璧主義', '時間管理'],
    価値観: ['成長', '貢献', '挑戦'],
    ライフイベント: [
      { 年: 2020, イベント: '大学入学', 影響度: 4, カテゴリ: '学業' },
      { 年: 2022, イベント: 'インターンシップ', 影響度: 5, カテゴリ: '仕事' },
      { 年: 2023, イベント: 'ゼミ長経験', 影響度: 4, カテゴリ: 'リーダーシップ' }
    ],
    将来ビジョン: {
      短期目標: 'コンサルタントとして経験を積む',
      長期目標: '社会課題解決に貢献する',
      志望業界: 'コンサルティング',
      志望職種: 'ビジネスコンサルタント'
    },
    経験: [
      {
        タイトル: 'ゼミ長',
        説明: '20名のゼミを主導し、研究プロジェクトを成功に導いた',
        スキル: ['リーダーシップ', 'チームワーク', 'プロジェクト管理'],
        '影響・成果': 'ゼミ全体のモチベーション向上と成果向上',
        '学び・気づき': 'チーム運営の難しさと達成感',
        期間_月数: 12,
        カテゴリ: 'リーダーシップ'
      },
      {
        タイトル: 'インターンシップ',
        説明: 'マーケティング部門で市場分析を担当',
        スキル: ['データ分析', '市場調査', 'プレゼンテーション'],
        '影響・成果': '新規事業提案が採用された',
        '学び・気づき': 'ビジネスの現場での実践的スキル',
        期間_月数: 3,
        カテゴリ: '仕事'
      }
    ]
  };

  const デモ選考データ: 選考データ = {
    企業リスト: [
      {
        id: '1',
        ステータス: '選考中',
        優先度: '第一志望',
        業界: 'コンサルティング',
        規模: '大企業',
        選考段階リスト: [
          { ステータス: '通過', 評価: 4 },
          { ステータス: '通過', 評価: 5 },
          { ステータス: '予定' }
        ],
        総合評価: 5
      },
      {
        id: '2',
        ステータス: '内定',
        優先度: '第二志望',
        業界: 'コンサルティング',
        規模: '大企業',
        選考段階リスト: [
          { ステータス: '通過', 評価: 4 },
          { ステータス: '通過', 評価: 4 },
          { ステータス: '通過', 評価: 5 }
        ],
        総合評価: 4
      }
    ]
  };

  const デモ活動データ: 活動データ = {
    ケース練習数: 15,
    ケース正答数: 12,
    自己分析完成度: 75,
    ネットワーキング参加回数: 3,
    面接練習回数: 8,
    スキル評価リスト: [
      { スキル名: '論理的思考', スコア: 85, 評価日: '2025-01-01' },
      { スキル名: 'プレゼンテーション', スコア: 78, 評価日: '2025-01-05' }
    ],
    ピアレビューリスト: [
      { 評価: 4, カテゴリ: 'コミュニケーション' },
      { 評価: 5, カテゴリ: '論理性' },
      { 評価: 3, カテゴリ: 'リーダーシップ' }
    ],
    最終活動日: '2025-01-08',
    連続活動日数: 12
  };

  return キャリアスコア計算(デモ自己分析データ, デモ選考データ, デモ活動データ, [65, 68, 72, 75]);
}

/**
 * 英語版との互換性のための関数（既存コードとの連携用）
 */
export function calculateDemoCareerScore(): CareerScore {
  const result = デモキャリアスコア計算();
  
  // 英語版のインターフェースに変換
  return {
    overall: result.総合スコア,
    breakdown: {
      Communication: result.詳細スコア.コミュニケーション,
      Logic: result.詳細スコア.論理性,
      Leadership: result.詳細スコア.リーダーシップ,
      Fit: result.詳細スコア.適合性,
      Vitality: result.詳細スコア.活力
    },
    insights: {
      strengths: result.分析結果.強み,
      improvements: result.分析結果.改善点,
      recommendations: result.分析結果.推奨アクション
    },
    trend: result.トレンド === '上昇' ? 'up' : result.トレンド === '下降' ? 'down' : 'stable',
    lastUpdated: result.最終更新日
  };
}

/**
 * スコア履歴の保存・取得
 */
export function saveScoreHistory(score: CareerScore, userId: string): void {
  const key = `career-score-history-${userId}`;
  const existing = localStorage.getItem(key);
  const history = existing ? JSON.parse(existing) : [];
  
  history.push({
    date: score.lastUpdated,
    overall: score.overall,
    breakdown: score.breakdown
  });
  
  // 最新30件のみ保持
  if (history.length > 30) {
    history.splice(0, history.length - 30);
  }
  
  localStorage.setItem(key, JSON.stringify(history));
}

export function getScoreHistory(userId: string): Array<{ date: string; overall: number; breakdown: any }> {
  const key = `career-score-history-${userId}`;
  const stored = localStorage.getItem(key);
  return stored ? JSON.parse(stored) : [];
}